library(shiny)
library(dplyr)
library(RPostgreSQL)
source('U:/opb/ODP/delnice/server.R')
source('U:/opb/ODP/delnice/ui.R')
install.packages("dplyr")
runApp("delnice")
library(shiny)
?runApp
library(shiny)
runApp("delnice")
runApp("delnice")
setwd()
getwd()
setwd("U:/opb/ODP")
runApp("delnice")
source('U:/opb/ODP/delnice/server.R', echo=TRUE)
source('U:/opb/ODP/delnice/server.R', echo=TRUE)
runApp("delnice")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
x <- select(filter(tabela,simbol %in% (input$select) & datum >= input$datum[1] & datum <= input$datum[2]),datum)
conn <- src_postgres(dbname = db, host = host,
user = user, password = password)
tabela <- tbl(conn, "delnice")
x <- select(filter(tabela,simbol %in% (input$select) & datum >= input$datum[1] & datum <= input$datum[2]),datum)
x <- select(filter(tabela,simbol == 'CAT' & cena == 87.37,datum)
)
x
x <- select(filter(tabela,simbol == 'CAT' & cena == 87.37),datum)
x
class(x)
as.numeric(x)
as.vector(x)
y <- data.frame(x)
zacetna <- data.frame(select(filter(tabela,simbol %in% 'AAPL' & datum == "2014-31-12"),datum))
zacetna <- data.frame(select(filter(tabela,simbol %in% ('AAPL') & datum == "2014-31-12"),datum))
zacetna <- data.frame(select(filter(tabela,simbol %in% ('AAPL') & datum == "2014-30-12"),datum))
zacetna <- data.frame(select(filter(tabela,simbol %in% ('AAPL') & datum == "2014-29-12"),datum))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
cene <- data.frame(select(filter(tabela,simbol %in% ('AAPL') & datum >= "2014-04-04" & datum <= "2014-04-04""),cena))
cene <- data.frame(select(filter(tabela,simbol %in% ('AAPL') & datum >= "2014-04-04" & datum <= "2014-04-04"),cena))
cene
class(cena)
class(cene)
cc <- as.vector(cene)
cc
class(cene)
cene[1,1]
c <- cene[1,]
c
class(cene)
cc <- as.numeric(cene)
cc
class(cene)
cene/70
class(cene)
cene
cene/70
shiny::runApp()
cene
cene <- data.frame(select(filter(tabela,simbol %in% ('AAPL') & datum >= "2014-04-04" & datum <= "2014-04-05"),cena))
cene
cene <- data.frame(select(filter(tabela,simbol %in% ('AAPL') & datum >= "2014-03-04" & datum <= "2014-07-05"),cena))
cene
cene <- data.frame(select(filter(tabela,simbol %in% ('AAPL') & datum >= "2014-03-04" & datum <= "2014-03-06"),cena))
cene
cene[,1]
class(cene[,1])
cene[,1]/70
shiny::runApp()
zacetna1 <- data.frame(select(filter(tabela,simbol %in% ('AAPL') & datum >= "2014-04-04" & datum <= "2014-04-04"),datum))
zacetna2 <- data.frame(select(filter(tabela,simbol %in% ('CAT') & datum >= "2014-04-04" & datum <= "2014-04-04"),datum))
zacetna
zacetna1
zacetna1 <- data.frame(select(filter(tabela,simbol %in% ('AAPL') & datum >= "2014-04-04" & datum <= "2014-04-04"),cena))
zacetna2 <- data.frame(select(filter(tabela,simbol %in% ('CAT') & datum >= "2014-04-04" & datum <= "2014-04-04"),cena))
zacetna1
x <- c(1,2,3,4)
x / zacetna1
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
zacetna1 <- data.frame(select(filter(tabela,simbol %in% ('AAPL') & datum >= "2014-04-05" & datum <= "2014-04-05"),cena))
zacetna
zacetna1
class(zacetna1)
zacetna1 == 0
zacetna1 == NULL
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(quantmod)
tabela <- read.csv2("DJIA.csv",header=TRUE,fileEncoding="Windows-1250")
imena <- tabela$Symbol
imena <- levels(imena)
imena <- append(imena,"GSPC")
imena
for(i in 1:length(imena)){
print(i)}
for(i in 1:length(imena)){
print(imena[i])}
mat <- "mk"
cc <- "kk"
mat * cc
mat + cc
cbind(mat,cc)
x <- paste(mat,cc,sep="")
x
for(i in 1:length(imena)){
zaUvoz[i] <- paste(imena[i],"[,6"],sep="")}
for(i in 1:length(imena)){
zaUvoz[i] <- paste(imena[i],"[,6]",sep="")}
zaUvoz <- c()
for(i in 1:length(imena)){
zaUvoz[i] <- paste(imena[i],"[,6]",sep="")}
zaUvoz
getSymbols(imena,from=datum)
datum <- "2014-01-01"
getSymbols(imena,from=datum)
AAPL
colnames(AAPL)
AAPL$AAPL.Adjusted
zaUvoz <- c()
for(i in 1:length(imena)){
zaUvoz[i] <- paste(imena[i],"$",imena[i],".Adjusted",sep="")}
zaUvoz
zaUvoz[1]
length(zaUvoz[1])
AAPL[,6]
"AAPL[,6]"
replace("AAPL[,6]",", )
as.name("AAPL[,6]")
cbind(as.name("AAPL[,6]"),AXP)
as.symbol("AAPL[,6]")
